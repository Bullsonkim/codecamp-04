// 두 수를 입력받아 두 수의 최대공약수와 최소공배수를 반환하는 함수, solution을 완성해 보세요. 배열의 맨 앞에 최대공약수, 그다음 최소공배수를 넣어 반환하면 됩니다. 예를 들어 두 수 3, 12의 최대공약수는 3, 최소공배수는 12이므로 solution(3, 12)는 [3, 12]를 반환해야 합니다.

function solution(n, m) {
  //최대공약수: 두수의 약수 중에서 제일 큰수
  //최소공배수: 두수의 배수 중에서 제일 작은수

  const answer = [];

  //최대 공약수
  const gcdArr = [];
  for (let i = 1; i <= m; i++) {
    if (n % i === 0 && m % i === 0) {
      gcdArr.push(i);
    }
  }
  answer[0] = Math.max(...gcdArr);

  //최소 공배수
  for (let i = m; i <= n * m; i += m) {
    if (i % n === 0) {
      answer[1] = i;
      break;
    }
  }
  return answer;
}

//유클리드 호제법
// a를 b로 나눴을때 (a 보다 b보다 클 경우) === 큰 수 에서 작은 수를 나눴을때
//나머지값 결과가 0이 되면 작은 수가 최대공약수가됨
//0이 되지 않으면 작은 수가 다시 큰수가 되고 나머지 값이 작은 수가 된다
//계속 반복했을떄 나머지 값이 0이나오면 작은수가 최대공약수
function solution(n, m) {
  let a = m; // 큰수
  let b = n; // 작은수
  let r = 0; // a를 b로 나눴을때 나머지 값 저장

  while (a % b > 0) {
    r = a % b;
    a = b; // 큰수에 작은 수 할당
    b = r; // 작은수에 나머지값 할당
  }
  //두 수를 곱한 값에 최대 공약수를 나누면 최소공배수가 됨
  return [b, (n * m) / b];
}
